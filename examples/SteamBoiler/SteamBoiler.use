model SteamBoiler

enum valveState {open, closed}

enum State {on, off}

enum Mode {Normal, Initialization, Degraded, Rescue, EmergencyStop}

class SteamBoiler
attributes
ready : Boolean
capacity : Real
minimalNormal : Real
maximalNormal : Real
maximumIncrease : Real
maximumDecrease : Real
minimalLimit : Real
maximalLimit : Real
valveOpen : valveState
operations
@OperationDetails(isQuery = "false")
OpenValve()
end

class SteamMeasurementDevice
attributes
ready : Boolean
evaporationRate : Real
operations
@OperationDetails(isQuery = "true")
getSteam() : Real
end

class WaterLevelMeasurementDevice
attributes
ready : Boolean
waterLevel : Real
operations
@OperationDetails(isQuery = "true")
getLevel() : Real
end

class Pump
attributes
ready : Boolean
capacity : Real
mode : State
end

class PumpController
attributes
ready : Boolean
circulating : Boolean
operations
@OperationDetails(isQuery = "false")
OpenPump()
@OperationDetails(isQuery = "false")
ClosePump()
end

class ControlProgram
attributes
mode : Mode
ready : Boolean
failureDetected : Boolean
wlmdFailure : Boolean
smdFailure : Boolean
pumpFailure : Boolean
pumpControllerFailure : Boolean
operations
@OperationDetails(isQuery = "false")
StartOperation()
end

association SteamBoilerControlProgram between
SteamBoiler[1] role sb
ControlProgram[1] role program
end
association SteamBoilerWLMD between
SteamBoiler[1] role sb
WaterLevelMeasurementDevice[1] role wlmd
end
association SteamBoilerSMD between
SteamBoiler[1] role sb
SteamMeasurementDevice[1] role smd
end
association SteamBoilerPump between
SteamBoiler[1] role sb
Pump[1] role pump
end
association ControlProgramPump between
ControlProgram[1] role program
Pump[1] role pump
end
association PumpControllerPump between
PumpController[1] role controller
Pump[1] role pump
end
association ControlProgramPumpController between
ControlProgram[1] role program
PumpController[1] role PC
end
association ControlProgramWLMD between
ControlProgram[1] role program
WaterLevelMeasurementDevice[1] role wlmd
end
association ControlProgramSMD between
ControlProgram[1] role program
SteamMeasurementDevice[1] role smd
end

constraints
context SteamBoiler
inv openMeansInitialized: self.valveOpen=#open implies self.program.mode=#Initialization

context WaterLevelMeasurementDevice::getLevel() : Real
pre pre1: not self.oclIsUndefined()
post post1: self.waterLevel >= 0

context PumpController::OpenPump()
pre pre1: self.pump.mode = #off
post post1: self.pump.mode = #on


