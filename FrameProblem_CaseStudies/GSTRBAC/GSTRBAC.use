model GSTRBAC

class User
attributes
name : String
operations
@OperationDetails(isQuery = "false")
assignRole(r : Role, z : STZone) : UserRoleAssignment
@OperationDetails(isQuery = "false")
deassignRole(r : Role, z : STZone)
@OperationDetails(isQuery = "false")
activateRole(r : Role, z : STZone) : UserRoleActivation
@OperationDetails(isQuery = "false")
deactivateRole(r : Role, z : STZone)
@OperationDetails(isQuery = "true")
getAssignedRoles(z : STZone) : Set(Role) = self.relations->select(r | r.oclIsTypeOf(UserRoleAssignment) and r.zone=z)->collect(r | r.role)->asSet()

@OperationDetails(isQuery = "true")
getActivatedRoles(z : STZone) : Set(Role) = self.relations->select(r | r.oclIsTypeOf(UserRoleActivation) and r.zone=z)->collect(r | r.role)->asSet()

@OperationDetails(isQuery = "true")
getAuthorizedRoles(z : STZone) : Set(Role) = self.getAssignedRoles(z)->union(self.getAssignedRoles(z)->collect(r | r.getAllAHInheritedRoles(z))->asSet())

@OperationDetails(isQuery = "true")
checkAccess(o : Object, a : Activity, z : STZone) : Boolean = getActivatedRoles(z)->collect(r | r.getAuthorizedPermissions(z))->asSet()->exists(p | p.object=o and p.activity=a)

end

class STZone
end

class Role
operations
@OperationDetails(isQuery = "false")
addAHJuniorRole(r : Role, z : STZone) : A_Hierarchy
@OperationDetails(isQuery = "false")
deleteAHJuniorRole(r : Role, z : STZone)
@OperationDetails(isQuery = "false")
addIHJuniorRole(r : Role, z : STZone) : I_Hierarchy
@OperationDetails(isQuery = "false")
deleteIHJuniorRole(r : Role, z : STZone)
@OperationDetails(isQuery = "false")
addSSoDRrole(r : Role, z : STZone) : RSSOD
@OperationDetails(isQuery = "false")
deleteSSoDRole(r : Role, z : STZone)
@OperationDetails(isQuery = "false")
addDSoDrole(r : Role, z : STZone) : DSOD
@OperationDetails(isQuery = "false")
deleteDSoDRole(r : Role, z : STZone)
@OperationDetails(isQuery = "false")
assignPermission(p : Permission, z : STZone) : PermissionAssignment
@OperationDetails(isQuery = "false")
deassignPermission(p : Permission, z : STZone)
@OperationDetails(isQuery = "true")
getSSoDRoles(z : STZone) : Set(Role) = self.sod->select(s | s.zone=z and s.oclIsTypeOf(RSSOD))->collect(s | s.getInvolvedRoles())->union(self.SOD->select(s | s.zone=z and s.oclIsTypeOf(RSSOD))->collect(s | s.getInvolvedRoles()))->excluding(self)->asSet()

@OperationDetails(isQuery = "true")
getDSoDRoles(z : STZone) : Set(Role) = self.sod->select(s | s.zone=z and s.oclIsTypeOf(DSOD))->collect(s | s.getInvolvedRoles())->union(self.SOD->select(s | s.zone=z and s.oclIsTypeOf(DSOD))->collect(s | s.getInvolvedRoles()))->excluding(self)->asSet()

@OperationDetails(isQuery = "true")
getJuniorRoles(z : STZone) : Set(Role) = RoleHierarchy.allInstances->select(h | h.seniorRole=self and h.zone=z)->collect(rh | rh.juniorRole)->asSet()

@OperationDetails(isQuery = "true")
getAHJuniorRoles(z : STZone) : Set(Role) = A_Hierarchy.allInstances->select(ah | ah.seniorRole=self and ah.zone=z)->collect(ah1 | ah1.juniorRole)->asSet()

@OperationDetails(isQuery = "true")
getIHJuniorRoles(z : STZone) : Set(Role) = I_Hierarchy.allInstances->select(ih | ih.seniorRole=self and ih.zone=z)->collect(ih1 | ih1.juniorRole)->asSet()

@OperationDetails(isQuery = "true")
getPrerequisiteRoles() : Set(Role) = self.prerequisiteRole->asSet()

@OperationDetails(isQuery = "true")
inherits(r : Role, z : STZone) : Boolean = if (self.getJuniorRoles(z)->includes(r)) then true else self.getJuniorRoles(z)->exists(j | j.inherits(r,z)) endif

@OperationDetails(isQuery = "true")
inheritsAH(r : Role, z : STZone) : Boolean = if (self.getAHJuniorRoles(z)->includes(r)) then true else self.getAHJuniorRoles(z)->exists(j | j.inheritsAH(r,z)) endif

@OperationDetails(isQuery = "true")
inheritsIH(r : Role, z : STZone) : Boolean = if (self.getIHJuniorRoles(z)->includes(r)) then true else self.getIHJuniorRoles(z)->exists(j | j.inheritsIH(r,z)) endif

@OperationDetails(isQuery = "true")
getAllAHInheritedRoles(z : STZone) : Set(Role) = Role.allInstances->select(r | self.inheritsAH(r,z))->asSet()

@OperationDetails(isQuery = "true")
getAllIHInheritedRoles(z : STZone) : Set(Role) = Role.allInstances->select(r | self.inheritsIH(r,z))->asSet()

@OperationDetails(isQuery = "true")
getAssignedPermissions(z : STZone) : Set(Permission) = self.permAssig->select(pa | pa.zone=z)->collect(pa1 | pa1.permission)->asSet()

@OperationDetails(isQuery = "true")
getAuthorizedPermissions(z : STZone) : Set(Permission) = self.getAssignedPermissions(z)->union(self.getAllIHInheritedRoles(z)->collect(r | r.getAssignedPermissions(z)))->asSet()

end

class Permission
operations
@OperationDetails(isQuery = "false")
addSoDPermission(p : Permission, z : STZone) : PSSOD
@OperationDetails(isQuery = "false")
deleteSoDPermission(p : Permission, z : STZone)
@OperationDetails(isQuery = "true")
getSoDPermissions(z : STZone) : Set(Permission) = self.pssod->select(s | s.zone=z)->collect(s | s.getInvolvedPermissions())->union(self.PSSOD->select(s | s.zone=z)->collect(s | s.getInvolvedPermissions()))->excluding(self)->asSet()

@OperationDetails(isQuery = "true")
getPrerequisitePermissions() : Set(Permission) = self.prerequisitePermission->asSet()

end

class Object
end

class Activity
end

class Location
end

class TimeInterval
end

abstract class UserRoleRelation
end

class UserRoleAssignment < UserRoleRelation
end

class UserRoleActivation < UserRoleRelation
end

abstract class RoleHierarchy
end

class A_Hierarchy < RoleHierarchy
end

class I_Hierarchy < RoleHierarchy
end

abstract class SOD
operations
@OperationDetails(isQuery = "true")
getInvolvedRoles() : Set(Role) = self.firstRole->including(self.secondRole)

end

class RSSOD < SOD
end

class DSOD < SOD
end

class PermissionAssignment
end

class PSSOD
operations
@OperationDetails(isQuery = "true")
getInvolvedPermissions() : Set(Permission) = self.firstPermission->including(self.secondPermission)

end

association URRUser between
User[1] role user
UserRoleRelation[1..*] role relations
end
association URRRole between
Role[1] role role
UserRoleRelation[1..*] role relations
end
association URRZone between
STZone[1] role zone
UserRoleRelation[1..*] role relations
end
aggregation ZoneLocation between
STZone[1..*] role include
Location[1] role location
end
aggregation ZoneTimeInterval between
STZone[1..*] role include
TimeInterval[1] role interval
end
association UserZone between
User[1..*] role users
STZone[1..*] role currentzones
end
association RoleZone between
Role[1..*] role roles
STZone[1..*] role allowedzones
end
association PermissionZone between
Permission[1..*] role permissions
STZone[1..*] role zones
end
association ObjectZone between
Object[1..*] role objects
STZone[1..*] role zones
end
aggregation PermissionObject between
Permission[1..*] role permission
Object[1] role object
end
aggregation PermissionActivity between
Permission[1..*] role permission
Activity[1] role activity
end
aggregation RolePermZone between
PermissionAssignment[1..*] role permAssign
STZone[1] role zone
end
aggregation SODZone between
SOD[1..*] role sod
STZone[1] role zone
end
aggregation PSSODZone between
PSSOD[1..*] role pssod
STZone[1] role zone
end
aggregation RHZone between
RoleHierarchy[1..*] role rh
STZone[1] role zone
end
aggregation RH1Role between
RoleHierarchy[1..*] role RH
Role[1] role juniorRole
end
aggregation RH2Role between
RoleHierarchy[1..*] role rh
Role[1] role seniorRole
end
aggregation SOD1Role between
Role[1] role firstRole
SOD[1..*] role sod
end
aggregation SOD2Role between
Role[1] role secondRole
SOD[1..*] role SOD
end
aggregation PSSOD1Permission between
Permission[1] role firstPermission
PSSOD[1..*] role pssod
end
aggregation PSSOD2Permission between
Permission[1] role secondPermission
PSSOD[1..*] role PSSOD
end
aggregation PerAssToRole between
Role[1] role role
PermissionAssignment[1..*] role permAssig
end
aggregation PerAssToPermission between
Permission[1] role permission
PermissionAssignment[1..*] role permAssig
end
aggregation PrerequisiteRole between
Role[1..*] role prerequisiteRole
Role[1..*] role requisitorRole
end
aggregation PrerequisitePermission between
Permission[1..*] role prerequisitePermission
Permission[1..*] role requisitorPermission
end

constraints
context User
inv SSOD_With_RH_Constraint: STZone.allInstances->forAll(z | not self.getAuthorizedRoles(z)->exists(r1,r2 | r1.getSSoDRoles(z)->includes(r2)))

context User
inv Activation_Constraint_with_RH: self.currentzones->forAll(z | self.getAuthorizedRoles(z)->includesAll(self.getActivatedRoles(z)))

context User
inv Activation_Constraint: self.currentzones->forAll(z | self.getAssignedRoles(z)->includesAll(self.getActivatedRoles(z)))

context User
inv DSOD_Constraint2: STZone.allInstances->forAll(z | not self.getActivatedRoles(z)->exists(r1,r2 | r1.getDSoDRoles(z)->includes(r2)))

context User
inv Prerequisite_URAssign: STZone.allInstances->forAll(z | Role.allInstances->forAll(r1 | (self.getAssignedRoles(z)->includes(r1)) implies (self.getAssignedRoles(z)->includesAll(r1.getPrerequisiteRoles()))))

context User
inv Prerequisite_URActive: STZone.allInstances->forAll(z | Role.allInstances->forAll(r1 | (self.getAssignedRoles(z)->includes(r1)) implies (self.getAssignedRoles(z)->includesAll(r1.getPrerequisiteRoles()))))

context User::assignRole(r : Role, z : STZone) : UserRoleAssignment
pre definedObjects: r.isDefined and z.isDefined
pre zoneIncluded: self.currentzones->includes(z) and r.allowedzones->includes(z)
pre roleNotAssigned: self.getAssignedRoles(z)->excludes(r)
pre roleNotSSoD: self.getAssignedRoles(z)->collect(r | r.getSSoDRoles(z))->excludes(r)
post newUserRoleRelation: (self.relations-self.relations@pre)->size()=1
post newRoleAssignment: (self.relations-self.relations@pre)->forAll(rl | rl.oclIsNew() and rl.oclIsTypeOf(UserRoleAssignment) and rl.zone=z and rl.role->includes(r))
post roleIsAssigned: self.getAssignedRoles(z)->includes(r)

context User::deassignRole(r : Role, z : STZone)
pre roleIsAssigned: self.getAssignedRoles(z)->includes(r)
post roleDeassigned: self.getAssignedRoles(z)->excludes(r)
post roleAssignmentObjectDeleted: (self.relations@pre-self.relations)->size()=1 and (UserRoleAssignment.allInstances@pre-UserRoleAssignment.allInstances)->size()=1

context User::activateRole(r : Role, z : STZone) : UserRoleActivation
pre definedObject: (not r.oclIsUndefined()) and (not z.oclIsUndefined)
pre zoneIncluded: self.currentzones->includes(z) and r.allowedzones->includes(z)
pre roleNotActivated: self.getActivatedRoles(z)->excludes(r)
pre roleIsAssigned: self.getAssignedRoles(z)->includes(r)
post newUserRoleRelation: (self.relations-self.relations@pre)->size()=1
post newRoleActivation: (self.relations-self.relations@pre)->forAll(rl | rl.oclIsNew() and rl.oclIsTypeOf(UserRoleActivation) and rl.zone=z and rl.role->includes(r))
post roleIsActivated: self.getActivatedRoles(z)->includes(r)

context Role
inv Permission_Inheritance_Constraint1: STZone.allInstances->forAll(z | self.getAuthorizedPermissions(z)->includesAll(self.getAllIHInheritedRoles(z)->collect(r | r.getAssignedPermissions(z))->asSet()))

context Role
inv Permission_Inheritance_Constraint2: STZone.allInstances->forAll(z | self.getAllIHInheritedRoles(z)->forAll(r | r.getAssignedPermissions(z)->intersection(self.getAuthorizedPermissions(z))=r.getAssignedPermissions(z)))

context Role
inv Hierarchy_Cycle_Constraint: not STZone.allInstances->exists(z | self.inherits(self,z))

context Role
inv PSOD_RH_Constraint: STZone.allInstances->forAll(z | not self.getAuthorizedPermissions(z)->exists(p1,p2 | p1.getSoDPermissions(z)->includes(p2)))

context Role::addAHJuniorRole(r : Role, z : STZone) : A_Hierarchy
pre definedObjects: r.isDefined and z.isDefined
pre zoneIncluded: self.allowedzones->includes(z) and r.allowedzones->includes(z) --it might be self.currentzones
pre notAHJuniorRole: self.getAHJuniorRoles(z)->excludes(r)
post newRoleHierarchy: (self.rh-self.rh@pre)->size()=1 and (self.RH-self.RH@pre)->size()=1
post newRole_AHierarchy: (self.rh-self.rh@pre)->forAll(rh | rh.oclIsNew() and rh.oclIsTypeOf(A_Hierarchy) and rh.zone=z and rh.juniorRole=r and rh.seniorRole=self)
post roleIsAdded: self.getAHJuniorRoles(z)->includes(r)

context Role::deleteAHJuniorRole(r : Role, z : STZone)
pre roleIsJuniorRole: self.getAHJuniorRoles(z)->includes(r)
post roleDeleted: self.getAHJuniorRoles(z)->excludes(r)
post A_HierarchyObjectDeleted: (self.rh@pre-self.rh)->size()=1 and (self.RH@pre-self.RH)->size()=1 and (A_Hierarchy.allInstances@pre-A_Hierarchy.allInstances)->size()=1

context Role::addIHJuniorRole(r : Role, z : STZone) : I_Hierarchy
pre definedObjects: r.isDefined and z.isDefined
pre zoneIncluded: self.allowedzones->includes(z) and r.allowedzones->includes(z) --it might be self.currentzones
pre notIHJuniorRole: self.getIHJuniorRoles(z)->excludes(r)
post newRoleHierarchy: (self.rh-self.rh@pre)->size()=1 and (self.RH-self.RH@pre)->size()=1
post newRole_IHierarchy: (self.rh-self.rh@pre)->forAll(rh | rh.oclIsNew() and rh.oclIsTypeOf(I_Hierarchy) and rh.zone=z and rh.juniorRole=r and rh.seniorRole=self)
post roleIsAdded: self.getIHJuniorRoles(z)->includes(r)

context Role::deleteIHJuniorRole(r : Role, z : STZone)
pre roleIsJuniorRole: self.getIHJuniorRoles(z)->includes(r)
post roleDeleted: self.getIHJuniorRoles(z)->excludes(r)
post I_HierarchyObjectDeleted: (self.rh@pre-self.rh)->size()=1 and (self.RH@pre-self.RH)->size()=1 and (I_Hierarchy.allInstances@pre-I_Hierarchy.allInstances)->size()=1

context Role::addSSoDRrole(r : Role, z : STZone) : RSSOD
pre definedObjects: r.isDefined and z.isDefined
pre zoneIncluded: self.allowedzones->includes(z) and r.allowedzones->includes(z) --it might be self.currentzones
pre notSSoDRole: self.getSSoDRoles(z)->excludes(r)
post newSOD: (self.sod-self.sod@pre)->size()=1 and (self.SOD-self.SOD@pre)->size()=1
post newSSoD: (self.sod-self.sod@pre)->forAll(sod | sod.oclIsNew() and sod.oclIsTypeOf(RSSOD) and sod.zone=z and sod.firstRole=r and sod.secondRole=self)
post roleIsAdded: self.getSSoDRoles(z)->includes(r)

context Role::deleteSSoDRole(r : Role, z : STZone)
pre roleIsSSoDRole: self.getSSoDRoles(z)->includes(r)
post roleDeleted: self.getSSoDRoles(z)->excludes(r)
post SSoDObjectDeleted: (self.sod@pre-self.sod)->size()=1 and (self.SOD@pre-self.SOD)->size()=1 and (RSSOD.allInstances@pre-RSSOD.allInstances)->size()=1

context RSSOD
inv SSOD_Constraint: not UserRoleAssignment.allInstances->exists(ura1,ura2 | ura1.user=ura2.user and ura1.role=self.firstRole and ura2.role=secondRole and ura1.zone=self.zone and ura2.zone=self.zone)

context DSOD
inv DSOD_Constraint1: not UserRoleActivation.allInstances->exists(ura1,ura2 | ura1.user=ura2.user and ura1.role=self.firstRole and ura2.role=secondRole and ura1.zone=self.zone and ura2.zone=self.zone)

context PSSOD
inv PSOD_Constraint1: not PermissionAssignment.allInstances->exists(pa1,pa2 | pa1.role=pa2.role and pa1.permission=self.firstPermission and pa2.permission=self.secondPermission and pa1.zone=self.zone and pa2.zone=self.zone)


